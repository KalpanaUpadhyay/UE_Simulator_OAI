Okay now  lets learn internal flow, say during running I am getting autentication failure dur to sync fail, what could be the flow and issue


Great — let’s dig into the internal flow of the Authentication Failure due to sync failure in the context of OAI UE and 4G EPC (MME + HSS). This issue usually points to AKA (Authentication and Key Agreement) failure caused by mismatched sequence numbers between UE and HSS.

🔁 Context: 4G AKA Flow (EPS-AKA)
UE → eNodeB → MME: Attach Request (with IMSI)

MME ↔ HSS: Send Authentication Info Request (AIR), gets back a vector from HSS

MME → UE: NAS Authentication Request (includes RAND, AUTN)

UE computes RES using:

RAND

AUTN (XOR’ed with SQN)

UE key from USIM/emulated key store

If UE detects that the SQN is not within the expected range, it sends:

Authentication Failure (cause: synch failure)

Includes AUTS to help HSS resync

🔍 Internal Flow and Code Locations (OAI)
🔸 OAI UE Side:
File: openair3/NAS/UE/EMM/Service/emm_fsm.c, AuthenticationResponse.c, AuthenticationFailure.c

Trigger: UE gets AUTN from MME and checks sequence number (SQN)

If SQN is outside allowed window → generates AUTS and sends Authentication Failure

🔸 OAI MME Side:
File: openairCN/SRC/NAS/EMM/Authentication.c

Receives Authentication Failure with AUTS

MME forwards this to HSS via another Authentication Info Request (AIR) with resyncInfo

HSS uses AUTS to compute correct SQN and returns a new vector

MME retries Authentication Request

❗ Root Causes of Sync Failure
Cause	Description
❌ Mismatched SQN	UE and HSS are not aligned on SQN; could be due to reuse of old auth vector or out-of-sync USIM state
🔁 Replay Attack Prevention	UE rejects reused AUTN (with old SQN)
🧪 Hardcoded Keys	If UE uses emulated USIM (e.g., hardcoded K/OPC) and mismatch occurs
🔄 No resync handled	HSS or MME not handling resync properly
🧱 Missing/incorrect AUTS handling	If UE fails to generate correct AUTS or MME fails to forward it

🧪 Debugging Steps
✅ 1. Verify UE Key Config:
In UE config file:

USIM:
  imsi: "001010123456789"
  key: "8baf473f2f8fd09487cccbd7097c6862"
  opc: "e734f8734007d6c5ce7a0508809e7e9c"
Ensure same IMSI/key/OPC is provisioned in HSS subscriber database.

✅ 2. Enable Detailed Logs:
In OAI UE:

--log_verbosity level --ninja -d
Watch for logs like:

EMM: Authentication Failure (Cause: Synchronization Failure)
Sending AUTS...
In MME logs:

Received Authentication Failure with AUTS
Resync requested from HSS
✅ 3. Check HSS Handling:
In openair-cn HSS, verify:

HandleResync is implemented

AUTS is correctly parsed

New vector is generated on resync

✅ 4. Force Vector Refresh in HSS DB (if persistent issue):
If it always fails, clear old auth vectors:

DELETE FROM `eps_authentication_vectors` WHERE imsi='001010123456789';
Then restart MME and UE.

For IMS : you need to first go to IMS server to add details for IMSI

✅ Summary Fix Flow
UE detects SQN mismatch → Sends Authentication Failure + AUTS
↓
MME sends resyncInfo to HSS
↓
HSS recalculates SQN and returns new vector
↓
MME sends new Authentication Request
↓
UE proceeds with correct RES → Authentication Success



✅ 1. Where is AUTS generated in the OAI UE code?
The AUTS is generated in the NAS layer when the UE detects that the SQN (Sequence Number) in the AUTN (Authentication Token) is out of sync.

🔍 Location in Code (OAI UE):
File:
openair3/NAS/UE/EMM/Security/Authentication.c

Function:
emm_proc_authentication_request()

Inside this function:

UE decodes RAND and AUTN from the MME.

It performs integrity check (f1) and extracts SQN.

If SQN is not acceptable (too far behind/ahead), it calls:

generate_auts(...)  // Generates AUTS using RESYNC algo
emm_proc_authentication_failure(...)  // Sends AUT Failure message
🔐 generate_auts():
Implements resynchronization procedure: AUTS = SQN ⊕ AK || MAC-S

Uses secret K, same as in HSS

This function uses milennas_f5 (AK) and milennas_f1 (MAC)

✅ 2. Where AUTS is handled on MME side?
🔍 Location in Code (OAI MME):
File:
openairCN/NAS/MME/Authentication.c

Function:
emm_proc_authentication_failure()
This function checks if the cause is EMM_CAUSE_SYNCH_FAILURE:

if (emm_cause == EMM_CAUSE_SYNCH_FAILURE) {
    // Extract AUTS from message
    // Include it in the next Authentication Info Request (AIR)
    // Send to HSS
}
🛠️ Simulate Sync Failure (for testing)
You can do this by misaligning the sequence number in HSS or modifying UE to intentionally reject AUTN.

🧪 Option 1: Modify UE code to always trigger sync failure
In emm_proc_authentication_request(), add:

emm_proc_authentication_failure(emm_ctx, EMM_CAUSE_SYNCH_FAILURE);
return RETURNok;
This will bypass checking and always simulate a sync issue.

🧪 Option 2: Alter HSS to return a bad SQN
In the HSS code (if using OpenAirHSS or custom MySQL-backed HSS), modify the send_authentication_info() response to send stale SQN by subtracting from current value.

For example, return a vector with SQN - 1000.

🔄 End-to-End Trace Summary
Component	Message/Action
UE	Receives RAND, AUTN
UE	Computes SQN ⊕ AK from AUTN
UE	Detects out-of-sync SQN
UE	Sends Authentication Failure + AUTS
MME	Forwards AUTS to HSS in Authentication Info Request
HSS	Computes correct SQN using AUTS
HSS	Returns new vector
MME	Sends new Authentication Request
UE	Authenticates successfully
